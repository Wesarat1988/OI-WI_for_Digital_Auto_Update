@page "/pdfs"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject NavigationManager NavManager

<h2 class="mb-3">üìÑ PDF Browser (Local Server)</h2>

<div class="mb-3">
    <label class="form-label fw-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå</label>
    <select class="form-select" value="@selectedLine" @onchange="HandleFolderChanged" disabled="@isLoadingFolders">
        <option value="" disabled>-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå --</option>
        @foreach (var line in availableLines)
        {
            <option value="@line">@line</option>
        }
    </select>
    @if (!string.IsNullOrEmpty(foldersError))
    {
        <div class="alert alert-danger mt-2" role="alert">@foldersError</div>
    }
</div>

<div class="row">
    <div class="col-12 col-lg-4 mb-3 mb-lg-0">
        <input class="form-control mb-2"
               placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå..."
               @bind="search"
               @bind:event="oninput"
               disabled="@isLoadingFiles" />
        <ul class="list-group" style="max-height: 70vh; overflow:auto;">
            @if (isLoadingFiles)
            {
                <li class="list-group-item">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</li>
            }
            else if (!Filtered.Any())
            {
                <li class="list-group-item">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå</li>
            }
            else
            {
                @foreach (var f in Filtered)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center @(string.Equals(selected, f, StringComparison.Ordinal) ? "active" : string.Empty)">
                        <span class="flex-grow-1 text-truncate me-3" title="@f">@f</span>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => Select(f)" disabled="@string.IsNullOrEmpty(selectedLine)">‡πÅ‡∏™‡∏î‡∏á</button>
                            <a class="btn btn-sm btn-outline-secondary"
                               href="@(selectedLine is null ? null : BuildPdfUrl(selectedLine, f))"
                               target="_blank" rel="noopener noreferrer"
                               aria-disabled="@(selectedLine is null)">‡πÄ‡∏õ‡∏¥‡∏î</a>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="col-12 col-lg-8">
        @if (!string.IsNullOrEmpty(filesError))
        {
            <div class="alert alert-danger" role="alert">@filesError</div>
        }
        else if (!string.IsNullOrEmpty(selected) && !string.IsNullOrEmpty(selectedLine))
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="m-0">‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: @selected</h5>
                <a class="btn btn-sm btn-primary"
                   href="@BuildPdfUrl(selectedLine!, selected)"
                   target="_blank" rel="noopener noreferrer">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà</a>
            </div>

            <iframe style="width:100%; height:75vh; border:1px solid #ccc; border-radius:8px;"
                    src="@BuildPdfUrl(selectedLine!, selected)"
                    title="PDF Preview"></iframe>
        }
        else if (!isLoadingFiles)
        {
            <div class="text-muted">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>
        }
    </div>
</div>

@code {
    readonly List<string> availableLines = new();
    List<string>? files;
    string? selectedLine;
    string? selected;
    string? foldersError;
    string? filesError;
    bool isLoadingFolders;
    bool isLoadingFiles;

    string search = string.Empty;

    IEnumerable<string> Filtered => (files ?? Enumerable.Empty<string>())
        .Where(f => string.IsNullOrWhiteSpace(search) || f.Contains(search, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadFoldersAsync();
    }

    async Task LoadFoldersAsync()
    {
        try
        {
            isLoadingFolders = true;
            foldersError = null;
            var folders = await Http.GetFromJsonAsync<List<string>>(NavManager.ToAbsoluteUri("/api/folders"));
            availableLines.Clear();
            if (folders is not null)
            {
                foreach (var folder in folders)
                {
                    availableLines.Add(folder);
                }
            }
        }
        catch (Exception ex)
        {
            foldersError = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {ex.Message}";
        }
        finally
        {
            isLoadingFolders = false;
        }

        if (availableLines.Count > 0)
        {
            var nextLine = GetMatchingLine(selectedLine) ?? availableLines.First();
            await LoadFilesAsync(nextLine);
        }
        else
        {
            selectedLine = null;
            files = new List<string>();
            selected = null;
        }
    }

    async Task LoadFilesAsync(string line)
    {
        selectedLine = line;
        selected = null;
        filesError = null;
        try
        {
            isLoadingFiles = true;
            files = await Http.GetFromJsonAsync<List<string>>(NavManager.ToAbsoluteUri($"/api/folders/{Uri.EscapeDataString(line)}"));
            files ??= new List<string>();
        }
        catch (Exception ex)
        {
            filesError = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {ex.Message}";
            files = new List<string>();
        }
        finally
        {
            isLoadingFiles = false;
        }

        var first = files.FirstOrDefault();
        if (first is not null)
        {
            ApplySelection(first, force: true);
        }
    }

    void Select(string name) => ApplySelection(name);

    async Task HandleFolderChanged(ChangeEventArgs args)
    {
        var line = args.Value?.ToString();
        var match = GetMatchingLine(line);
        if (!string.IsNullOrWhiteSpace(match))
        {
            await LoadFilesAsync(match);
            return;
        }

        selectedLine = null;
        files = new List<string>();
        selected = null;
    }

    static string BuildPdfUrl(string line, string name)
    {
        return $"/pdf/{Uri.EscapeDataString(line)}/{Uri.EscapeDataString(name)}";
    }

    string? GetMatchingLine(string? line)
    {
        if (string.IsNullOrWhiteSpace(line))
        {
            return null;
        }

        return availableLines.FirstOrDefault(l => string.Equals(l, line, StringComparison.OrdinalIgnoreCase));
    }

    bool ApplySelection(string name, bool force = false)
    {
        if (!force && string.Equals(selected, name, StringComparison.Ordinal))
        {
            return false;
        }

        selected = name;
        return true;
    }
}
