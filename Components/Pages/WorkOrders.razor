@page "/work-orders"
@using System.Globalization
@using System.Linq
@rendermode InteractiveServer

<PageTitle>Work Order Settings</PageTitle>

<div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center align-items-start gap-3 mb-4">
    <div>
        <h1 class="mb-1">Work Order Settings</h1>
        <div class="text-muted">‡∏Å‡∏≥‡∏´‡∏ô‡∏î Work Order ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</div>
    </div>
    <div class="d-flex flex-wrap gap-2 align-items-center">
        <div class="small text-muted">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: @FormatRelativeTime(lastSyncUtc)</div>
        <button class="btn btn-outline-secondary" @onclick="TriggerRefresh" disabled="isRefreshing">
            @if (isRefreshing)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            }
            <span>‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
        </button>
    </div>
</div>

<div class="row g-4">
    <div class="col-12 col-xl-4">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="fw-semibold">Global Settings</div>
                <span class="badge bg-light text-dark">Display</span>
            </div>
            <div class="card-body">
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" role="switch" id="autoDispatch" @bind="autoDispatch" />
                    <label class="form-check-label" for="autoDispatch">‡∏î‡∏∂‡∏á Work Order ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</label>
                    <div class="form-text">‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏¥‡∏á‡∏Å‡πå Work Order ‡∏à‡∏≤‡∏Å ERP ‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold" for="syncInterval">‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Å‡πå (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                    <input id="syncInterval"
                           type="number"
                           min="1"
                           class="form-control"
                           @bind="syncIntervalMinutes"
                           @bind:event="oninput" />
                    <div class="form-text">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Work Order ‡∏ó‡∏∏‡∏Å ‡πÜ @syncIntervalMinutes ‡∏ô‡∏≤‡∏ó‡∏µ</div>
                </div>

                <div class="row g-3 mb-3">
                    <div class="col">
                        <label class="form-label fw-semibold" for="shiftAStart">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏∞ A</label>
                        <input id="shiftAStart"
                               type="time"
                               class="form-control"
                               @bind-value="shiftAStartString"
                               @bind-value:event="oninput" />
                    </div>
                    <div class="col">
                        <label class="form-label fw-semibold" for="shiftAEnd">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏∞ A</label>
                        <input id="shiftAEnd"
                               type="time"
                               class="form-control"
                               @bind-value="shiftAEndString"
                               @bind-value:event="oninput" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold" for="defaultDisplay">‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏à‡∏≠</label>
                    <select id="defaultDisplay" class="form-select" @bind="defaultDisplayMode">
                        <option value="line">‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÑ‡∏•‡∏ô‡πå</option>
                        <option value="model">‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•</option>
                        <option value="workorder">‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡∏•‡∏∞ Work Order</option>
                    </select>
                </div>

                <div class="form-check mb-3">
                    <input id="showCompleted" class="form-check-input" type="checkbox" @bind="showCompletedOnDisplay" />
                    <label class="form-check-label" for="showCompleted">‡πÅ‡∏™‡∏î‡∏á Work Order ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ô‡∏à‡∏≠</label>
                </div>

                <button class="btn btn-primary w-100" @onclick="SaveGlobalSettings">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</button>

                @if (globalSettingsSavedUtc.HasValue)
                {
                    <div class="alert alert-success mt-3 mb-0 py-2 small">
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (@FormatRelativeTime(globalSettingsSavedUtc.Value))
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-12 col-xl-8">
        <div class="card shadow-sm mb-4">
            <div class="card-header d-flex flex-column flex-lg-row gap-2 align-items-lg-center justify-content-lg-between">
                <div class="d-flex align-items-center gap-2">
                    <div class="status-dot bg-success"></div>
                    <div>
                        <div class="fw-semibold">Live Queue</div>
                        <div class="small text-muted">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Work Order ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Camera Trigger</div>
                    </div>
                </div>
                <div class="d-flex flex-wrap gap-2">
                    <div class="badge rounded-pill text-bg-primary">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà @ActiveCountDisplay</div>
                    <div class="badge rounded-pill text-bg-warning">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö @PendingCountDisplay</div>
                    <div class="badge rounded-pill text-bg-success">‡∏ï‡∏£‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ @PinnedCountDisplay</div>
                </div>
            </div>
            <div class="card-body">
                <div class="row g-3 mb-3 align-items-end">
                    <div class="col-12 col-md-4">
                        <label class="form-label" for="searchTerm">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</label>
                        <div class="input-group">
                            <span class="input-group-text">üîç</span>
                            <input id="searchTerm"
                                   class="form-control"
                                   placeholder="WO / Model / Line"
                                   @bind-value="workOrderSearch"
                                   @bind-value:event="oninput" />
                        </div>
                    </div>
                    <div class="col-6 col-md-4">
                        <label class="form-label" for="statusFilter">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
                        <select id="statusFilter" class="form-select" @bind="statusFilter">
                            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                            @foreach (var status in Enum.GetValues<WorkOrderStatus>())
                            {
                                <option value="@status">@FormatStatus(status)</option>
                            }
                        </select>
                    </div>
                    <div class="col-6 col-md-4">
                        <label class="form-label" for="lineFilter">‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</label>
                        <select id="lineFilter" class="form-select" @bind="lineFilter">
                            <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                            @foreach (var line in availableLines)
                            {
                                <option value="@line">@line</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="table-responsive workorder-table">
                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th>Work Order</th>
                                <th>‡πÇ‡∏°‡πÄ‡∏î‡∏•</th>
                                <th>‡πÑ‡∏•‡∏ô‡πå</th>
                                <th>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</th>
                                <th>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</th>
                                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                <th class="text-center">Pin</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!FilteredWorkOrders.Any())
                            {
                                <tr>
                                    <td colspan="8" class="text-muted text-center py-4">‡πÑ‡∏°‡πà‡∏û‡∏ö Work Order ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var order in FilteredWorkOrders)
                                {
                                    <tr class="@(order.IsPinned ? "table-active" : null)">
                                        <td>
                                            <div class="fw-semibold">@order.WorkOrderNumber</div>
                                            <div class="small text-muted">Shift @order.Shift ‚Ä¢ @order.Remark</div>
                                        </td>
                                        <td>
                                            <div class="fw-semibold">@order.Model</div>
                                            <div class="small text-muted">@order.Description</div>
                                        </td>
                                        <td>@order.Line</td>
                                        <td>@order.TargetQuantity.ToString("N0", ThaiCulture)</td>
                                        <td>
                                            <div>@FormatWindow(order.StartDateTime, order.EndDateTime)</div>
                                            <div class="small text-muted">@FormatDuration(order.StartDateTime, order.EndDateTime)</div>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(order.Status)">@FormatStatus(order.Status)</span>
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-sm @(order.IsPinned ? "btn-warning" : "btn-outline-secondary")"
                                                    type="button"
                                                    @onclick="() => TogglePinned(order)">
                                                <span class="@(order.IsPinned ? "bi bi-pin-angle-fill" : "bi bi-pin")"></span>
                                            </button>
                                        </td>
                                        <td class="text-end">
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline-primary" type="button" @onclick="() => StartEdit(order)">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                                <button class="btn btn-sm btn-outline-danger" type="button" @onclick="() => RemoveOrder(order)">‡∏•‡∏ö</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-2">
                <div class="small text-muted">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: @workOrders.Count ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                <button class="btn btn-success" type="button" @onclick="ToggleAddPanel">@addPanelLabel</button>
            </div>
        </div>

        @if (isAddPanelOpen)
        {
            <div class="card shadow-sm mb-4 border-success">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <div class="fw-semibold">‡πÄ‡∏û‡∏¥‡πà‡∏° Work Order</div>
                    <button class="btn-close btn-close-white" type="button" aria-label="‡∏õ‡∏¥‡∏î" @onclick="ToggleAddPanel"></button>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(addError))
                    {
                        <div class="alert alert-danger">@addError</div>
                    }
                    else if (!string.IsNullOrEmpty(addSuccess))
                    {
                        <div class="alert alert-success">@addSuccess</div>
                    }

                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="newWorkOrder">Work Order</label>
                            <input id="newWorkOrder" class="form-control" placeholder="‡πÄ‡∏ä‡πà‡∏ô WO230045" @bind="draft.WorkOrderNumber" @bind:event="oninput" />
                        </div>
                        <div class="col-12 col-md-3">
                            <label class="form-label fw-semibold" for="newLine">‡πÑ‡∏•‡∏ô‡πå</label>
                            <select id="newLine" class="form-select" @bind="draft.Line">
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏•‡∏ô‡πå</option>
                                @foreach (var line in availableLines)
                                {
                                    <option value="@line">@line</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-md-3">
                            <label class="form-label fw-semibold" for="newShift">‡∏Å‡∏∞</label>
                            <select id="newShift" class="form-select" @bind="draft.Shift">
                                <option value="A">‡∏Å‡∏∞ A</option>
                                <option value="B">‡∏Å‡∏∞ B</option>
                                <option value="C">‡∏Å‡∏∞ C</option>
                            </select>
                        </div>

                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="newModel">‡πÇ‡∏°‡πÄ‡∏î‡∏•</label>
                            <input id="newModel" class="form-control" placeholder="‡πÄ‡∏ä‡πà‡∏ô Model-01" @bind="draft.Model" @bind:event="oninput" />
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="newDescription">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
                            <input id="newDescription" class="form-control" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏•‡∏≠‡∏á Lot#01" @bind="draft.Description" @bind:event="oninput" />
                        </div>

                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="newTarget">‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏•‡∏¥‡∏ï (‡∏ä‡∏¥‡πâ‡∏ô)</label>
                            <input id="newTarget" type="number" min="1" class="form-control" @bind="draft.TargetQuantity" @bind:event="oninput" />
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="newStartDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                            <InputDate id="newStartDate" class="form-control" @bind-Value="draft.StartDate" />
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="newEndDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                            <InputDate id="newEndDate" class="form-control" @bind-Value="draft.EndDate" />
                        </div>

                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="newStartTime">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                            <input id="newStartTime" type="time" class="form-control" @bind-value="draft.StartTime" @bind-value:event="oninput" />
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="newEndTime">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                            <input id="newEndTime" type="time" class="form-control" @bind-value="draft.EndTime" @bind-value:event="oninput" />
                        </div>

                        <div class="col-12">
                            <label class="form-label fw-semibold" for="newRemark">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                            <textarea id="newRemark" class="form-control" rows="2" placeholder="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡πá‡∏ô" @bind="draft.Remark" @bind:event="oninput"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-semibold" for="newStatus">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
                            <select id="newStatus" class="form-select" @bind="draft.Status">
                                @foreach (var status in Enum.GetValues<WorkOrderStatus>())
                                {
                                    <option value="@status">@FormatStatus(status)</option>
                                }
                            </select>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="newPinned" @bind="draft.IsPinned" />
                                <label class="form-check-label" for="newPinned">‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Camera Trigger</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-end gap-2">
                    <button class="btn btn-outline-secondary" type="button" @onclick="ResetDraft">‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
                    <button class="btn btn-success" type="button" @onclick="CreateWorkOrder">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
            </div>
        }

        @if (editingModel is not null && editingTarget is not null)
        {
            <div class="card shadow-sm border-primary">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <div class="fw-semibold">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Work Order @editingTarget.WorkOrderNumber</div>
                    <button class="btn-close btn-close-white" type="button" aria-label="‡∏õ‡∏¥‡∏î" @onclick="CancelEdit"></button>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(editError))
                    {
                        <div class="alert alert-danger">@editError</div>
                    }
                    <div class="row g-3">
                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="editLine">‡πÑ‡∏•‡∏ô‡πå</label>
                            <select id="editLine" class="form-select" @bind="editingModel.Line">
                                @foreach (var line in availableLines)
                                {
                                    <option value="@line">@line</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="editStatus">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
                            <select id="editStatus" class="form-select" @bind="editingModel.Status">
                                @foreach (var status in Enum.GetValues<WorkOrderStatus>())
                                {
                                    <option value="@status">@FormatStatus(status)</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="form-label fw-semibold" for="editTarget">‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏•‡∏¥‡∏ï</label>
                            <input id="editTarget" type="number" min="1" class="form-control" @bind="editingModel.TargetQuantity" @bind:event="oninput" />
                        </div>

                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="editStartDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                            <InputDate id="editStartDate" class="form-control" @bind-Value="editingModel.StartDate" />
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="editEndDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                            <InputDate id="editEndDate" class="form-control" @bind-Value="editingModel.EndDate" />
                        </div>

                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="editStartTime">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                            <input id="editStartTime" type="time" class="form-control" @bind-value="editingModel.StartTime" @bind-value:event="oninput" />
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label fw-semibold" for="editEndTime">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                            <input id="editEndTime" type="time" class="form-control" @bind-value="editingModel.EndTime" @bind-value:event="oninput" />
                        </div>

                        <div class="col-12">
                            <label class="form-label fw-semibold" for="editRemark">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                            <textarea id="editRemark" class="form-control" rows="2" @bind="editingModel.Remark" @bind:event="oninput"></textarea>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input id="editPinned" class="form-check-input" type="checkbox" @bind="editingModel.IsPinned" />
                                <label class="form-check-label" for="editPinned">‡∏ï‡∏£‡∏∂‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Camera Trigger</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-end gap-2">
                    <button class="btn btn-outline-secondary" type="button" @onclick="CancelEdit">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    <button class="btn btn-primary" type="button" @onclick="SaveEdit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 999px;
    }

    .workorder-table table {
        min-width: 760px;
    }

    .workorder-table tbody tr td {
        vertical-align: middle;
    }

    .workorder-table .bi {
        font-size: 1rem;
    }

    @@media (max-width: 575.98px) {
        .workorder-table table {
            min-width: auto;
        }
    }
</style>

@code {
    private static readonly CultureInfo ThaiCulture = new("th-TH");
    private readonly string[] availableLines = new[] { "F1", "F2", "F3", "F4" };
    private readonly List<WorkOrderEntry> workOrders = new();

    private bool autoDispatch = true;
    private int syncIntervalMinutes = 5;
    private TimeSpan shiftAStart = TimeSpan.FromHours(7);
    private TimeSpan shiftAEnd = TimeSpan.FromHours(19);
    private string defaultDisplayMode = "line";
    private bool showCompletedOnDisplay = false;
    private DateTime lastSyncUtc = DateTime.UtcNow.AddMinutes(-12);
    private bool isRefreshing;
    private DateTime? globalSettingsSavedUtc;

    private string workOrderSearch = string.Empty;
    private string? statusFilter;
    private string? lineFilter;

    private bool isAddPanelOpen;
    private readonly WorkOrderDraft draft = new();
    private string? addError;
    private string? addSuccess;

    private WorkOrderEntry? editingTarget;
    private WorkOrderEditModel? editingModel;
    private string? editError;

    private string shiftAStartString
    {
        get => FormatTimeSpan(shiftAStart);
        set
        {
            if (TimeSpan.TryParse(value, out var parsed))
            {
                shiftAStart = parsed;
            }
        }
    }

    private string shiftAEndString
    {
        get => FormatTimeSpan(shiftAEnd);
        set
        {
            if (TimeSpan.TryParse(value, out var parsed))
            {
                shiftAEnd = parsed;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SeedWorkOrders();
    }

    private void SeedWorkOrders()
    {
        workOrders.Clear();
        workOrders.AddRange(new[]
        {
            new WorkOrderEntry
            {
                WorkOrderNumber = "WO230145",
                Model = "ACM-55",
                Description = "Camera Trigger ‡∏ä‡∏∏‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                Line = "F1",
                TargetQuantity = 1200,
                StartDateTime = DateTime.Today.AddHours(7),
                EndDateTime = DateTime.Today.AddHours(15),
                Status = WorkOrderStatus.InProgress,
                IsPinned = true,
                Remark = "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Tool #2",
                Shift = "A"
            },
            new WorkOrderEntry
            {
                WorkOrderNumber = "WO230146",
                Model = "ACM-42",
                Description = "Lot ‡∏û‡∏¥‡πÄ‡∏®‡∏© QC",
                Line = "F2",
                TargetQuantity = 850,
                StartDateTime = DateTime.Today.AddHours(15.5),
                EndDateTime = DateTime.Today.AddHours(23.5),
                Status = WorkOrderStatus.Scheduled,
                IsPinned = false,
                Remark = "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Sensor",
                Shift = "B"
            },
            new WorkOrderEntry
            {
                WorkOrderNumber = "WO230147",
                Model = "ACM-55",
                Description = "‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
                Line = "F1",
                TargetQuantity = 900,
                StartDateTime = DateTime.Today.AddHours(19),
                EndDateTime = DateTime.Today.AddDays(1).AddHours(3),
                Status = WorkOrderStatus.Scheduled,
                IsPinned = false,
                Remark = "",
                Shift = "B"
            },
            new WorkOrderEntry
            {
                WorkOrderNumber = "WO230148",
                Model = "ACM-73",
                Description = "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà",
                Line = "F3",
                TargetQuantity = 640,
                StartDateTime = DateTime.Today.AddHours(8),
                EndDateTime = DateTime.Today.AddHours(12),
                Status = WorkOrderStatus.OnHold,
                IsPinned = false,
                Remark = "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ QC",
                Shift = "A"
            }
        });
    }

    private IEnumerable<WorkOrderEntry> FilteredWorkOrders => workOrders
        .Where(MatchesSearch)
        .Where(MatchesStatus)
        .Where(MatchesLine)
        .OrderBy(o => o.StartDateTime);

    private string ActiveCountDisplay => workOrders.Count(o => o.Status == WorkOrderStatus.InProgress).ToString(ThaiCulture);
    private string PendingCountDisplay => workOrders.Count(o => o.Status == WorkOrderStatus.Scheduled || o.Status == WorkOrderStatus.OnHold).ToString(ThaiCulture);
    private string PinnedCountDisplay => workOrders.Count(o => o.IsPinned).ToString(ThaiCulture);

    private string addPanelLabel => isAddPanelOpen ? "‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°" : "‡πÄ‡∏û‡∏¥‡πà‡∏° Work Order";

    private bool MatchesSearch(WorkOrderEntry order)
    {
        if (string.IsNullOrWhiteSpace(workOrderSearch))
        {
            return true;
        }

        var term = workOrderSearch.Trim();
        return order.WorkOrderNumber.Contains(term, StringComparison.OrdinalIgnoreCase)
               || order.Model.Contains(term, StringComparison.OrdinalIgnoreCase)
               || order.Line.Contains(term, StringComparison.OrdinalIgnoreCase)
               || (!string.IsNullOrEmpty(order.Description) && order.Description.Contains(term, StringComparison.OrdinalIgnoreCase));
    }

    private bool MatchesStatus(WorkOrderEntry order)
    {
        if (string.IsNullOrEmpty(statusFilter))
        {
            return true;
        }

        if (Enum.TryParse<WorkOrderStatus>(statusFilter, out var status))
        {
            return order.Status == status;
        }

        return true;
    }

    private bool MatchesLine(WorkOrderEntry order)
        => string.IsNullOrEmpty(lineFilter) || string.Equals(order.Line, lineFilter, StringComparison.OrdinalIgnoreCase);

    private void ToggleAddPanel()
    {
        isAddPanelOpen = !isAddPanelOpen;
        addError = null;
        addSuccess = null;
    }

    private void ResetDraft()
    {
        draft.Reset();
        addError = null;
        addSuccess = null;
    }

    private void CreateWorkOrder()
    {
        addError = null;
        addSuccess = null;

        if (string.IsNullOrWhiteSpace(draft.WorkOrderNumber))
        {
            addError = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç Work Order";
            return;
        }

        if (string.IsNullOrWhiteSpace(draft.Line))
        {
            addError = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï";
            return;
        }

        if (draft.StartDate is null || draft.EndDate is null)
        {
            addError = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î";
            return;
        }

        if (!TryParseTime(draft.StartTime, out var startTime) || !TryParseTime(draft.EndTime, out var endTime))
        {
            addError = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
            return;
        }

        if (draft.TargetQuantity < 1)
        {
            addError = "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0";
            return;
        }

        var start = draft.StartDate.Value.Date.Add(startTime);
        var end = draft.EndDate.Value.Date.Add(endTime);

        if (end <= start)
        {
            addError = "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°";
            return;
        }

        var order = new WorkOrderEntry
        {
            WorkOrderNumber = draft.WorkOrderNumber.Trim(),
            Model = draft.Model.Trim(),
            Description = draft.Description.Trim(),
            Line = draft.Line,
            TargetQuantity = draft.TargetQuantity,
            StartDateTime = start,
            EndDateTime = end,
            Status = draft.Status,
            IsPinned = draft.IsPinned,
            Remark = draft.Remark.Trim(),
            Shift = draft.Shift
        };

        workOrders.Add(order);
        addSuccess = $"‡πÄ‡∏û‡∏¥‡πà‡∏° Work Order {order.WorkOrderNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
        draft.Reset();
    }

    private void RemoveOrder(WorkOrderEntry order)
    {
        workOrders.Remove(order);
        if (editingTarget == order)
        {
            CancelEdit();
        }
    }

    private void TogglePinned(WorkOrderEntry order)
    {
        order.IsPinned = !order.IsPinned;
    }

    private void StartEdit(WorkOrderEntry order)
    {
        editingTarget = order;
        editingModel = WorkOrderEditModel.From(order);
        editError = null;
    }

    private void CancelEdit()
    {
        editingTarget = null;
        editingModel = null;
        editError = null;
    }

    private void SaveEdit()
    {
        if (editingTarget is null || editingModel is null)
        {
            return;
        }

        if (editingModel.StartDate is null || editingModel.EndDate is null)
        {
            editError = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î";
            return;
        }

        if (!TryParseTime(editingModel.StartTime, out var startTime) || !TryParseTime(editingModel.EndTime, out var endTime))
        {
            editError = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
            return;
        }

        var start = editingModel.StartDate.Value.Date.Add(startTime);
        var end = editingModel.EndDate.Value.Date.Add(endTime);

        if (end <= start)
        {
            editError = "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°";
            return;
        }

        editingTarget.Line = editingModel.Line;
        editingTarget.Status = editingModel.Status;
        editingTarget.TargetQuantity = editingModel.TargetQuantity;
        editingTarget.StartDateTime = start;
        editingTarget.EndDateTime = end;
        editingTarget.Remark = editingModel.Remark.Trim();
        editingTarget.IsPinned = editingModel.IsPinned;

        CancelEdit();
    }

    private void SaveGlobalSettings()
    {
        globalSettingsSavedUtc = DateTime.UtcNow;
    }

    private async Task TriggerRefresh()
    {
        if (isRefreshing)
        {
            return;
        }

        isRefreshing = true;
        try
        {
            await Task.Delay(1500);
            lastSyncUtc = DateTime.UtcNow;
        }
        finally
        {
            isRefreshing = false;
        }
    }

    private static bool TryParseTime(string? value, out TimeSpan time)
    {
        if (!string.IsNullOrWhiteSpace(value) && TimeSpan.TryParse(value, out time))
        {
            return true;
        }

        time = default;
        return false;
    }

    private static string FormatStatus(WorkOrderStatus status) => status switch
    {
        WorkOrderStatus.Scheduled => "‡∏£‡∏≠‡∏ú‡∏•‡∏¥‡∏ï",
        WorkOrderStatus.InProgress => "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏•‡∏¥‡∏ï",
        WorkOrderStatus.Completed => "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô",
        WorkOrderStatus.OnHold => "‡∏û‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
        _ => status.ToString()
    };

    private static string GetStatusBadgeClass(WorkOrderStatus status) => status switch
    {
        WorkOrderStatus.Scheduled => "text-bg-warning",
        WorkOrderStatus.InProgress => "text-bg-primary",
        WorkOrderStatus.Completed => "text-bg-success",
        WorkOrderStatus.OnHold => "text-bg-secondary",
        _ => "text-bg-light"
    };

    private static string FormatWindow(DateTime start, DateTime end)
        => string.Format(ThaiCulture, "{0:dd MMM yyyy HH:mm} - {1:HH:mm}", start, end);

    private static string FormatDuration(DateTime start, DateTime end)
    {
        var span = end - start;
        if (span.TotalHours < 24)
        {
            return string.Format(ThaiCulture, "{0} ‡∏ä‡∏°. {1} ‡∏ô‡∏≤‡∏ó‡∏µ", (int)span.TotalHours, span.Minutes);
        }

        var days = span.Days;
        var hours = span.Hours;
        return string.Format(ThaiCulture, "{0} ‡∏ß‡∏±‡∏ô {1} ‡∏ä‡∏°.", days, hours);
    }

    private static string FormatRelativeTime(DateTime timestampUtc)
    {
        var span = DateTime.UtcNow - timestampUtc;
        if (span.TotalMinutes < 1)
        {
            return "‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï";
        }

        if (span.TotalHours < 1)
        {
            return string.Format(ThaiCulture, "{0} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤", (int)Math.Round(span.TotalMinutes));
        }

        if (span.TotalDays < 1)
        {
            return string.Format(ThaiCulture, "{0} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤", (int)Math.Round(span.TotalHours));
        }

        return string.Format(ThaiCulture, "{0} ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô", (int)Math.Round(span.TotalDays));
    }

    private static string FormatTimeSpan(TimeSpan span)
        => string.Format(CultureInfo.InvariantCulture, "{0:00}:{1:00}", (int)span.TotalHours, span.Minutes);

    private sealed class WorkOrderEntry
    {
        public string WorkOrderNumber { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
        public int TargetQuantity { get; set; }
        public DateTime StartDateTime { get; set; }
        public DateTime EndDateTime { get; set; }
        public WorkOrderStatus Status { get; set; }
        public bool IsPinned { get; set; }
        public string Remark { get; set; } = string.Empty;
        public string Shift { get; set; } = "A";
    }

    private sealed class WorkOrderDraft
    {
        public string WorkOrderNumber { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
        public int TargetQuantity { get; set; } = 1000;
        public DateTime? StartDate { get; set; } = DateTime.Today;
        public DateTime? EndDate { get; set; } = DateTime.Today;
        public string StartTime { get; set; } = "07:00";
        public string EndTime { get; set; } = "19:00";
        public string Remark { get; set; } = string.Empty;
        public WorkOrderStatus Status { get; set; } = WorkOrderStatus.Scheduled;
        public bool IsPinned { get; set; }
        public string Shift { get; set; } = "A";

        public void Reset()
        {
            WorkOrderNumber = string.Empty;
            Model = string.Empty;
            Description = string.Empty;
            Line = string.Empty;
            TargetQuantity = 1000;
            StartDate = DateTime.Today;
            EndDate = DateTime.Today;
            StartTime = "07:00";
            EndTime = "19:00";
            Remark = string.Empty;
            Status = WorkOrderStatus.Scheduled;
            IsPinned = false;
            Shift = "A";
        }
    }

    private sealed class WorkOrderEditModel
    {
        public string Line { get; set; } = string.Empty;
        public WorkOrderStatus Status { get; set; }
        public int TargetQuantity { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string StartTime { get; set; } = string.Empty;
        public string EndTime { get; set; } = string.Empty;
        public string Remark { get; set; } = string.Empty;
        public bool IsPinned { get; set; }

        public static WorkOrderEditModel From(WorkOrderEntry entry) => new()
        {
            Line = entry.Line,
            Status = entry.Status,
            TargetQuantity = entry.TargetQuantity,
            StartDate = entry.StartDateTime.Date,
            EndDate = entry.EndDateTime.Date,
            StartTime = FormatTimeSpan(entry.StartDateTime.TimeOfDay),
            EndTime = FormatTimeSpan(entry.EndDateTime.TimeOfDay),
            Remark = entry.Remark,
            IsPinned = entry.IsPinned
        };
    }

    private enum WorkOrderStatus
    {
        Scheduled,
        InProgress,
        Completed,
        OnHold
    }
}
