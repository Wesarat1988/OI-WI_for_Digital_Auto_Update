@page "/edit"
@using System
@using System.Net.Http.Json
@using System.Linq
@inject HttpClient Http
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</PageTitle>

<div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center align-items-start gap-2 mb-4">
    <h1 class="mb-0">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h1>
    <button class="btn btn-outline-secondary" @onclick="RefreshAsync" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        <span>‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</span>
    </button>
</div>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <ul class="nav nav-tabs search-tabs mb-3" role="tablist">
            <li class="nav-item" role="presentation">
                <button type="button"
                        role="tab"
                        class="@GetTabButtonClass(SearchTab.Folder)"
                        @onclick="() => SetSearchTab(SearchTab.Folder)"
                        aria-selected="@(activeTab == SearchTab.Folder)">
                    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button type="button"
                        role="tab"
                        class="@GetTabButtonClass(SearchTab.Document)"
                        @onclick="() => SetSearchTab(SearchTab.Document)"
                        aria-selected="@(activeTab == SearchTab.Document)">
                    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                </button>
            </li>
        </ul>

        <div class="row g-2 align-items-center mb-3">
            <div class="col-12 col-md-6">
                <div class="input-group">
                    <span class="input-group-text">üîç</span>
                    <input class="form-control"
                           placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
                           @bind-value="searchTerm"
                           @bind-value:event="oninput"
                           aria-label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" />
                </div>
            </div>
            <div class="col-12 col-md-6 text-md-end text-muted small">
                @if (activeTab == SearchTab.Folder)
                {
                    <span>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: @GetFolderResultCount()</span>
                }
                else
                {
                    <span>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: @GetDocumentResultCount()</span>
                }
            </div>
        </div>

        <div class="search-results">
            @if (string.IsNullOrWhiteSpace(searchTerm))
            {
                <div class="text-muted">‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</div>
            }
            else if (activeTab == SearchTab.Folder)
            {
                var results = FilteredFolderResults.ToList();
                if (results.Count == 0)
                {
                    <div class="text-muted">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "@searchTerm"</div>
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var result in results)
                        {
                            <div class="list-group-item d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-2">
                                <div>
                                    <div class="fw-semibold">@result.DisplayName</div>
                                    <div class="small text-muted">@result.DisplayPath</div>
                                </div>
                                <div class="d-flex flex-wrap gap-2 text-muted small">
                                    <span>‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Å‡∏¥‡πà‡∏á: @result.PdfCount</span>
                                    <span>‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°: @result.TotalPdfCount</span>
                                    <span>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: @FormatDate(result.LastModifiedUtc)</span>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                var results = FilteredDocumentResults.ToList();
                if (results.Count == 0)
                {
                    <div class="text-muted">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "@searchTerm"</div>
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var result in results)
                        {
                            <div class="list-group-item d-flex flex-column gap-1">
                                <div class="d-flex justify-content-between flex-wrap gap-2 align-items-start">
                                    <div>
                                        <div class="fw-semibold">@result.BaseName</div>
                                        <div class="small text-muted">@result.DisplayPath</div>
                                    </div>
                                    <div class="text-muted small text-end">
                                        <div>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: @result.VersionCount</div>
                                        @if (result.LatestDivision.HasValue)
                                        {
                                            <div>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: Division @result.LatestDivision.Value.ToString("D2")</div>
                                        }
                                        <div>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: @FormatDate(result.LatestUploadedUtc)</div>
                                    </div>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(result.LatestComment))
                                {
                                    <div class="badge bg-light text-dark align-self-start">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: @result.LatestComment</div>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

<style>
    .search-tabs .nav-item button {
        border: none;
        border-bottom: 2px solid transparent;
        background: none;
        padding: 0.5rem 1rem;
        font-weight: 500;
        color: var(--bs-secondary, #6c757d);
        cursor: pointer;
    }

    .search-tabs .nav-item button.active {
        color: var(--bs-primary, #0d6efd);
        border-bottom: 2px solid var(--bs-primary, #0d6efd);
    }

    .search-results .list-group-item {
        border-left: none;
        border-right: none;
    }

    .search-results .list-group-item:first-child {
        border-top: none;
    }

    .search-results .list-group-item:last-child {
        border-bottom: none;
    }

    .branch-tree {
        position: relative;
        padding-left: 0.5rem;
    }

    .branch-node {
        position: relative;
    }

    .branch-card {
        position: relative;
        background-color: #ffffff;
        border-radius: 0.85rem;
        border: 1px solid var(--bs-border-color, #dee2e6);
        box-shadow: 0 0.25rem 0.5rem rgba(15, 23, 42, 0.08);
        margin-left: 1.5rem;
        margin-bottom: 1.25rem;
        padding: 1.25rem;
    }

    .branch-card::before {
        content: '';
        position: absolute;
        left: -1.05rem;
        top: 1.35rem;
        width: 0.7rem;
        height: 0.7rem;
        border-radius: 999px;
        background-color: var(--bs-primary, #0d6efd);
        box-shadow: 0 0 0 4px #ffffff;
    }

    .branch-card::after {
        content: '';
        position: absolute;
        left: -1.5rem;
        top: 1.65rem;
        width: 1.5rem;
        height: 2px;
        background-color: var(--bs-border-color, #d0d7de);
    }

    .branch-card.latest {
        border-color: rgba(255, 193, 7, 0.45);
        box-shadow: 0 0.35rem 0.75rem rgba(255, 193, 7, 0.25);
    }

    .branch-card.latest::before {
        background-color: var(--bs-warning, #ffc107);
    }

    .branch-card.latest::after {
        background-color: rgba(255, 193, 7, 0.5);
    }

    .branch-node.depth-0 > .branch-card {
        border-left: 4px solid var(--bs-primary, #0d6efd);
        margin-left: 0.75rem;
    }

    .branch-node.depth-0 > .branch-card::before {
        left: -0.8rem;
        top: 1.5rem;
        background-color: var(--bs-success, #198754);
    }

    .branch-node.depth-0 > .branch-card::after {
        display: none;
    }

    .branch-children {
        position: relative;
        margin-left: 2rem;
        padding-left: 1.5rem;
        border-left: 2px solid var(--bs-border-color, #d0d7de);
    }

    .branch-title {
        font-size: 1.05rem;
    }

    .branch-badge {
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .branch-metrics > div {
        background-color: rgba(13, 110, 253, 0.08);
        border-radius: 0.65rem;
        padding: 0.4rem 0.75rem;
        color: var(--bs-primary, #0d6efd);
        font-weight: 500;
    }

    .branch-metrics > div:nth-child(2) {
        background-color: rgba(25, 135, 84, 0.08);
        color: var(--bs-success, #198754);
    }

    .branch-metrics > div:nth-child(3) {
        background-color: rgba(108, 117, 125, 0.1);
        color: var(--bs-secondary, #6c757d);
    }

    .branch-recent span {
        display: inline-block;
        margin-right: 0.25rem;
    }

    .branch-recent span + span::before {
        content: '‚Ä¢';
        margin-right: 0.25rem;
        color: var(--bs-secondary, #6c757d);
    }

    .document-timeline {
        position: relative;
        background-color: #f8f9fa;
        border-radius: 1rem;
        border: 1px solid var(--bs-border-color, #dee2e6);
        padding: 1.25rem 1.5rem;
    }

    .document-name {
        font-size: 1rem;
    }

    .version-timeline {
        position: relative;
        margin-left: 0.35rem;
        padding-left: 1.5rem;
        border-left: 2px solid var(--bs-border-color, #d0d7de);
    }

    .version-node {
        position: relative;
        margin-bottom: 1.15rem;
    }

    .version-node:last-child {
        margin-bottom: 0;
    }

    .version-node::before {
        content: '';
        position: absolute;
        left: -1.05rem;
        top: 0.75rem;
        width: 0.75rem;
        height: 0.75rem;
        border-radius: 50%;
        background-color: var(--bs-primary, #0d6efd);
        box-shadow: 0 0 0 4px #ffffff;
    }

    .version-node.latest::before {
        background-color: var(--bs-success, #198754);
    }

    .version-content {
        background-color: #ffffff;
        border-radius: 0.85rem;
        border: 1px solid var(--bs-border-color, #dee2e6);
        padding: 0.9rem 1.1rem;
        box-shadow: 0 0.25rem 0.5rem rgba(15, 23, 42, 0.05);
    }

    .version-node.latest .version-content {
        border-color: rgba(25, 135, 84, 0.35);
        box-shadow: 0 0.3rem 0.6rem rgba(25, 135, 84, 0.2);
        background-color: rgba(25, 135, 84, 0.08);
    }

    .version-comment {
        margin-top: 0.5rem;
        padding: 0.5rem 0.75rem;
        border-radius: 0.65rem;
        background-color: rgba(13, 110, 253, 0.08);
        color: var(--bs-body-color, #212529);
        font-size: 0.9rem;
        line-height: 1.4;
    }

    @@media (max-width: 767.98px) {
        .branch-children {
            border-left: none;
        }

        .branch-card {
            margin-left: 0;
        }

        .branch-card::before {
            left: -0.4rem;
        }

        .branch-card::after {
            display: none;
        }

        .document-timeline {
            padding: 1rem;
        }

        .version-timeline {
            margin-left: 0;
            padding-left: 1.1rem;
        }

        .version-node::before {
            left: -0.85rem;
        }
    }
</style>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}
else if (isLoading)
{
    <div class="text-muted">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...</div>
}
else if (lineStatuses is null || lineStatuses.Count == 0)
{
    <div class="alert alert-info" role="alert">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</div>
}
else
{
    foreach (var line in lineStatuses)
    {
        <div class="card mb-4 shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center flex-wrap gap-2">
                <div class="fs-5 fw-semibold">@line.Line</div>
                @if (!string.IsNullOrEmpty(line.ErrorMessage))
                {
                    <span class="badge bg-danger">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                }
                else if (line.Root is not null)
                {
                    <span class="badge bg-primary">@line.Root.Status</span>
                }
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(line.ErrorMessage))
                {
                    <div class="alert alert-danger mb-0">@line.ErrorMessage</div>
                }
                else if (line.Root is null)
                {
                    <div class="text-muted">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ</div>
                }
                else
                {
                    <div class="row g-3 mb-3">
                        <div class="col-12 col-md-4">
                            <div class="text-muted text-uppercase small">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                            <div class="fw-semibold">@line.Root.TotalPdfCount</div>
                        </div>
                        <div class="col-12 col-md-4">
                            <div class="text-muted text-uppercase small">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</div>
                            <div class="fw-semibold">@FormatDate(line.Root.LastModifiedUtc)</div>
                        </div>
                        <div class="col-12 col-md-4">
                            <div class="text-muted text-uppercase small">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
                            <div class="fw-semibold">@line.Root.Status</div>
                        </div>
                    </div>

                    <div class="branch-tree mt-3">
                        @RenderBranchNode(line.Root, 0, isLatest: true)
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    private List<LineEditStatusResponse>? lineStatuses;
    private bool isLoading = true;
    private string? errorMessage;
    private SearchTab activeTab = SearchTab.Folder;
    private string searchTerm = string.Empty;
    private readonly List<FolderSearchResult> folderIndex = new();
    private readonly List<DocumentSearchResult> documentIndex = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStatusesAsync();
    }

    private async Task RefreshAsync()
    {
        await LoadStatusesAsync();
    }

    private async Task LoadStatusesAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var endpoint = NavManager.ToAbsoluteUri("/api/edit-status");
            var result = await Http.GetFromJsonAsync<List<LineEditStatusResponse>>(endpoint);
            lineStatuses = (result ?? new List<LineEditStatusResponse>())
                .OrderByDescending(l => l.Root?.LastModifiedUtc ?? DateTime.MinValue)
                .ThenBy(l => l.Line, StringComparer.CurrentCultureIgnoreCase)
                .ToList();
            RebuildSearchIndexes();
        }
        catch (Exception ex)
        {
            errorMessage = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ: {ex.Message}";
            lineStatuses = null;
            folderIndex.Clear();
            documentIndex.Clear();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<FolderSearchResult> FilteredFolderResults
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                return folderIndex;
            }

            var term = searchTerm.Trim();
            return folderIndex
                .Select(f => new { Item = f, Rank = CalculateFolderMatchRank(f, term) })
                .Where(entry => entry.Rank < int.MaxValue)
                .OrderBy(entry => entry.Rank)
                .ThenBy(entry => entry.Item.DisplayName, StringComparer.CurrentCultureIgnoreCase)
                .ThenBy(entry => entry.Item.DisplayPath, StringComparer.CurrentCultureIgnoreCase)
                .Select(entry => entry.Item);
        }
    }

    private IEnumerable<DocumentSearchResult> FilteredDocumentResults
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                return documentIndex;
            }

            var term = searchTerm.Trim();
            return documentIndex
                .Select(d => new { Item = d, Rank = CalculateDocumentMatchRank(d, term) })
                .Where(entry => entry.Rank < int.MaxValue)
                .OrderBy(entry => entry.Rank)
                .ThenBy(entry => entry.Item.BaseName, StringComparer.CurrentCultureIgnoreCase)
                .ThenBy(entry => entry.Item.DisplayPath, StringComparer.CurrentCultureIgnoreCase)
                .Select(entry => entry.Item);
        }
    }

    private void SetSearchTab(SearchTab tab) => activeTab = tab;

    private string GetTabButtonClass(SearchTab tab)
        => tab == activeTab ? "nav-link active" : "nav-link";

    private int GetFolderResultCount()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return folderIndex.Count;
        }

        var term = searchTerm.Trim();
        return folderIndex.Count(f => CalculateFolderMatchRank(f, term) < int.MaxValue);
    }

    private int GetDocumentResultCount()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return documentIndex.Count;
        }

        var term = searchTerm.Trim();
        return documentIndex.Count(d => CalculateDocumentMatchRank(d, term) < int.MaxValue);
    }

    private static int CalculateFolderMatchRank(FolderSearchResult folder, string term)
    {
        var ranks = new[]
        {
            CalculateMatchRank(term, folder.DisplayName),
            CalculateMatchRank(term, folder.DisplayPath)
        };

        return ranks.Min();
    }

    private static int CalculateDocumentMatchRank(DocumentSearchResult document, string term)
    {
        var ranks = new List<int>
        {
            CalculateMatchRank(term, document.BaseName),
            CalculateMatchRank(term, document.DisplayPath)
        };

        if (!string.IsNullOrWhiteSpace(document.LatestComment) && document.LatestComment.Contains(term, StringComparison.OrdinalIgnoreCase))
        {
            ranks.Add(3);
        }
        else
        {
            ranks.Add(int.MaxValue);
        }

        return ranks.Min();
    }

    private static int CalculateMatchRank(string term, string? candidate)
    {
        if (string.IsNullOrWhiteSpace(candidate))
        {
            return int.MaxValue;
        }

        if (string.Equals(candidate, term, StringComparison.OrdinalIgnoreCase))
        {
            return 0;
        }

        if (candidate.StartsWith(term, StringComparison.OrdinalIgnoreCase))
        {
            return 1;
        }

        if (candidate.Contains(term, StringComparison.OrdinalIgnoreCase))
        {
            return 2;
        }

        return int.MaxValue;
    }

    private void RebuildSearchIndexes()
    {
        folderIndex.Clear();
        documentIndex.Clear();

        if (lineStatuses is null)
        {
            return;
        }

        foreach (var line in lineStatuses)
        {
            if (line.Root is null)
            {
                continue;
            }

            IndexBranch(line.Line, line.Root, Array.Empty<string>());
        }
    }

    private void IndexBranch(string line, BranchEditStatusResponse branch, IReadOnlyList<string> parentSegments)
    {
        var segments = parentSegments.ToList();
        if (!string.IsNullOrWhiteSpace(branch.Name))
        {
            var isRoot = parentSegments.Count == 0 && string.Equals(branch.Name, line, StringComparison.OrdinalIgnoreCase);
            if (!isRoot)
            {
                segments.Add(branch.Name);
            }
        }

        var displaySegments = new List<string> { line };
        displaySegments.AddRange(segments);
        var displayPath = string.Join(" / ", displaySegments);
        var displayName = segments.Count > 0 ? segments[^1] : line;

        folderIndex.Add(new FolderSearchResult
        {
            Line = line,
            DisplayName = displayName,
            DisplayPath = displayPath,
            PdfCount = branch.PdfCount,
            TotalPdfCount = branch.TotalPdfCount,
            LastModifiedUtc = branch.LastModifiedUtc
        });

        foreach (var document in branch.Documents ?? Enumerable.Empty<DocumentTimelineResponse>())
        {
            var latest = document.Versions
                .OrderByDescending(v => v.UploadedUtc)
                .ThenByDescending(v => v.Division)
                .FirstOrDefault();

            var baseName = document.BaseName ?? string.Empty;
            documentIndex.Add(new DocumentSearchResult
            {
                Line = line,
                BaseName = baseName,
                DisplayPath = string.Join(" / ", displaySegments.Append(baseName)),
                VersionCount = document.Versions.Count,
                LatestUploadedUtc = latest?.UploadedUtc,
                LatestDivision = latest?.Division,
                LatestComment = latest?.Comment ?? string.Empty
            });
        }

        foreach (var child in branch.Children)
        {
            IndexBranch(line, child, segments);
        }
    }

    private RenderFragment RenderBranchNode(BranchEditStatusResponse branch, int depth, bool isLatest = false)
    {
        return builder =>
        {
            var seq = 0;
            var orderedChildren = OrderBranches(branch.Children);
            var orderedDocuments = (branch.Documents ?? new List<DocumentTimelineResponse>())
                .OrderByDescending(d => d.LatestUploadedUtc ?? DateTime.MinValue)
                .ThenBy(d => d.BaseName, StringComparer.CurrentCultureIgnoreCase)
                .ToList();
            var recentFiles = branch.RecentFiles
                .OrderByDescending(f => f.LastModifiedUtc)
                .Take(3)
                .ToList();

            var nodeClasses = $"branch-node depth-{depth}";

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", nodeClasses);

            var cardClasses = depth == 0 ? "branch-card root-branch" : "branch-card";
            if (isLatest && depth > 0)
            {
                cardClasses += " latest";
            }

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", cardClasses);

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "d-flex justify-content-between align-items-start gap-3 flex-wrap");

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "d-flex flex-column");
            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "class", "branch-title fw-semibold");
            builder.AddContent(seq++, branch.Name);
            builder.CloseElement();

            if (branch.PathSegments.Count > 0)
            {
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "small text-muted");
                builder.AddContent(seq++, string.Join('/', branch.PathSegments));
                builder.CloseElement();
            }

            if (isLatest && depth > 0)
            {
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "badge bg-warning text-dark align-self-start mt-2");
                builder.AddContent(seq++, "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î");
                builder.CloseElement();
            }
            builder.CloseElement();

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "d-flex flex-column text-end gap-1");
            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "class", "badge rounded-pill bg-light text-dark border branch-badge align-self-end");
            builder.AddContent(seq++, string.IsNullOrEmpty(branch.ErrorMessage) ? branch.Status : "Error");
            builder.CloseElement();
            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "class", "small text-muted");
            builder.AddContent(seq++, FormatDate(branch.LastModifiedUtc));
            builder.CloseElement();
            builder.CloseElement();

            builder.CloseElement();

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "branch-metrics d-flex flex-wrap gap-2 mb-3");

            builder.OpenElement(seq++, "div");
            builder.AddContent(seq++, $"‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Å‡∏¥‡πà‡∏á: {branch.PdfCount}");
            builder.CloseElement();

            builder.OpenElement(seq++, "div");
            builder.AddContent(seq++, $"‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°: {branch.TotalPdfCount}");
            builder.CloseElement();

            builder.OpenElement(seq++, "div");
            builder.AddContent(seq++, $"‡∏Å‡∏¥‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢: {branch.Children.Count}");
            builder.CloseElement();

            builder.CloseElement();

            if (!string.IsNullOrEmpty(branch.ErrorMessage))
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "alert alert-danger mb-0");
                builder.AddContent(seq++, branch.ErrorMessage);
                builder.CloseElement();
            }
            else if (orderedDocuments.Count > 0)
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "document-timelines d-flex flex-column gap-3 mt-3");

                foreach (var document in orderedDocuments)
                {
                    builder.AddContent(seq++, RenderDocumentTimeline(document));
                }

                builder.CloseElement();
            }
            else if (recentFiles.Count > 0)
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "branch-recent small text-muted");
                builder.AddContent(seq++, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ");

                for (var i = 0; i < recentFiles.Count; i++)
                {
                    var file = recentFiles[i];
                    builder.OpenElement(seq++, "span");
                    builder.AddAttribute(seq++, "class", "text-body-secondary");
                    builder.AddContent(seq++, $"{file.FileName} ({FormatDate(file.LastModifiedUtc)})");
                    builder.CloseElement();
                }

                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "text-muted small");
                builder.AddContent(seq++, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡∏Å‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ");
                builder.CloseElement();
            }

            builder.CloseElement();

            if (orderedChildren.Any())
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "branch-children");

                for (var i = 0; i < orderedChildren.Count; i++)
                {
                    var child = orderedChildren[i];
                    builder.AddContent(seq++, RenderBranchNode(child, depth + 1, isLatest: i == 0));
                }

                builder.CloseElement();
            }

            builder.CloseElement();
        };
    }

    private RenderFragment RenderDocumentTimeline(DocumentTimelineResponse document)
    {
        return builder =>
        {
            var seq = 0;
            var versions = document.Versions
                .OrderByDescending(v => v.UploadedUtc)
                .ThenByDescending(v => v.Division)
                .ToList();

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "document-timeline");

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "document-timeline-header d-flex justify-content-between align-items-start gap-2 flex-wrap mb-2");

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "d-flex flex-column");
            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "class", "document-name fw-semibold");
            builder.AddContent(seq++, document.BaseName);
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "d-flex flex-column align-items-end gap-1");

            if (document.LatestUploadedUtc is DateTime latest)
            {
                builder.OpenElement(seq++, "span");
                builder.AddAttribute(seq++, "class", "small text-muted");
                builder.AddContent(seq++, $"‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {FormatDate(latest)}");
                builder.CloseElement();
            }

            builder.OpenElement(seq++, "span");
            builder.AddAttribute(seq++, "class", "badge bg-success text-white");
            builder.AddContent(seq++, $"‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {versions.Count} ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô");
            builder.CloseElement();

            builder.CloseElement();

            builder.CloseElement();

            if (versions.Count > 0)
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "version-timeline");

                for (var i = 0; i < versions.Count; i++)
                {
                    var version = versions[i];
                    var versionClasses = "version-node";
                    if (i == 0)
                    {
                        versionClasses += " latest";
                    }

                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", versionClasses);

                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "version-content");

                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "d-flex justify-content-between align-items-start flex-wrap gap-2");

                    builder.OpenElement(seq++, "span");
                    builder.AddAttribute(seq++, "class", "fw-semibold");
                    builder.AddContent(seq++, $"Division {version.Division:D2}");
                    builder.CloseElement();

                    builder.OpenElement(seq++, "span");
                    builder.AddAttribute(seq++, "class", "small text-muted");
                    builder.AddContent(seq++, FormatDate(version.UploadedUtc));
                    builder.CloseElement();

                    builder.CloseElement();

                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "small text-muted");
                    builder.AddContent(seq++, version.FileName);
                    builder.CloseElement();

                    if (!string.IsNullOrWhiteSpace(version.Comment))
                    {
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", "version-comment");
                        builder.AddContent(seq++, version.Comment);
                        builder.CloseElement();
                    }

                    builder.CloseElement();
                    builder.CloseElement();
                }

                builder.CloseElement();
            }

            builder.CloseElement();
        };
    }

    private static List<BranchEditStatusResponse> OrderBranches(IEnumerable<BranchEditStatusResponse> branches)
        => branches
            .OrderByDescending(b => b.LastModifiedUtc ?? DateTime.MinValue)
            .ThenBy(b => b.Name, StringComparer.CurrentCultureIgnoreCase)
            .ToList();

    private static string FormatDate(DateTime? value)
        => value.HasValue ? value.Value.ToLocalTime().ToString("g") : "-";

    private static string FormatDate(DateTime value)
        => value.ToLocalTime().ToString("g");


    private enum SearchTab
    {
        Folder,
        Document
    }

    private sealed class LineEditStatusResponse
    {
        public string Line { get; set; } = string.Empty;
        public BranchEditStatusResponse? Root { get; set; }
        public string? ErrorMessage { get; set; }
    }

    private sealed class BranchEditStatusResponse
    {
        public string Name { get; set; } = string.Empty;
        public List<string> PathSegments { get; set; } = new();
        public int PdfCount { get; set; }
        public int TotalPdfCount { get; set; }
        public DateTime? LastModifiedUtc { get; set; }
        public string Status { get; set; } = string.Empty;
        public List<FileEditStatusResponse> RecentFiles { get; set; } = new();
        public List<DocumentTimelineResponse> Documents { get; set; } = new();
        public List<BranchEditStatusResponse> Children { get; set; } = new();
        public string? ErrorMessage { get; set; }
    }

    private sealed class FileEditStatusResponse
    {
        public string FileName { get; set; } = string.Empty;
        public DateTime LastModifiedUtc { get; set; }
        public long SizeBytes { get; set; }
        public string RelativePath { get; set; } = string.Empty;
    }

    private sealed class DocumentTimelineResponse
    {
        public string BaseName { get; set; } = string.Empty;
        public DateTime? LatestUploadedUtc { get; set; }
        public List<VersionTimelineResponse> Versions { get; set; } = new();
    }

    private sealed class VersionTimelineResponse
    {
        public string FileName { get; set; } = string.Empty;
        public int Division { get; set; }
        public DateTime UploadedUtc { get; set; }
        public string Comment { get; set; } = string.Empty;
        public string RelativePath { get; set; } = string.Empty;
    }

    private sealed class FolderSearchResult
    {
        public string Line { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string DisplayPath { get; set; } = string.Empty;
        public int PdfCount { get; set; }
        public int TotalPdfCount { get; set; }
        public DateTime? LastModifiedUtc { get; set; }
    }

    private sealed class DocumentSearchResult
    {
        public string Line { get; set; } = string.Empty;
        public string BaseName { get; set; } = string.Empty;
        public string DisplayPath { get; set; } = string.Empty;
        public int VersionCount { get; set; }
        public DateTime? LatestUploadedUtc { get; set; }
        public int? LatestDivision { get; set; }
        public string LatestComment { get; set; } = string.Empty;
    }
}
