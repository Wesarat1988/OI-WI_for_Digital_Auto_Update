@page "/Plugins"
@using BlazorPdfApp.Hosting
@using Contracts
@using Microsoft.AspNetCore.Components
@using System.IO
@inject IWebHostEnvironment Env
@inject IServiceProvider Services
@inject IReadOnlyList<IBlazorPlugin> UiPlugins
@inject NavigationManager Nav
@rendermode InteractiveServer

<h2>Installed Plugins</h2>

@if (manifests?.Count > 0)
{
    <ul class="plugin-list">
        @foreach (var p in manifests)
        {
            <li class="plugin-item">
                <h3>@($"{p.Name} v{p.Version}")</h3>
                <p><strong>ID:</strong> @p.Id</p>
                <p><strong>Entry:</strong> @p.EntryType</p>

                @if (!string.IsNullOrWhiteSpace(p.RouteBase))
                {
                    <p>
                        @* ใช้ NavLink เพื่อวิ่งผ่าน Blazor Router *@
                        <NavLink href="@p.RouteBase" class="btn btn-sm btn-outline-primary">
                            Open @p.RouteBase
                        </NavLink>
                    </p>
                }
            </li>
        }
    </ul>
}
else
{
    <p>ยังไม่มีปลั๊กอินติดตั้งในระบบ</p>
}

<hr />
<h5 class="mt-3">UI Plugins loaded: @UiPlugins?.Count</h5>

@if (UiPlugins?.Count > 0)
{
    <ul class="small text-muted">
        @foreach (var plug in UiPlugins)
        {
            <li>@plug.Id — <code>@plug.GetType().FullName</code>, root: <code>@plug.RootComponent?.FullName</code></li>
        }
    </ul>

    <h3 class="mt-3">Plugin Panels</h3>
    @foreach (var plug in UiPlugins)
    {
        if (plug.RootComponent is not null)
        {
            <div class="plugin-panel">
                <ErrorBoundary>
                    <ChildContent>
                        <DynamicComponent Type="plug.RootComponent" />
                    </ChildContent>
                    <ErrorContent>
                        <div class="alert alert-warning">
                            Plugin panel <strong>@plug.Id</strong> render failed.
                        </div>
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        }
    }
}
else
{
    <small class="text-muted">No UI plugins loaded (UiPlugins is empty).</small>
}

<style>
    .plugin-list {
        list-style: none;
        padding: 0;
    }

    .plugin-item {
        margin: 1rem 0;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

        .plugin-item h3 {
            margin: 0 0 0.5rem;
        }

    .plugin-panel {
        margin: 1rem 0;
        padding: 1rem;
        border: 1px solid #bbb;
        border-radius: 8px;
    }
</style>

@code {
    private List<PluginManifest>? manifests;

    protected override void OnInitialized()
    {
        var pluginRoot = Path.Combine(Env.ContentRootPath, "Plugins");
        manifests = PluginLoader.LoadManifests(pluginRoot);
    }
}
